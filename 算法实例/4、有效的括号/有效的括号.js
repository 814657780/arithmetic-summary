// 题目：有效的括号

// 给定一个只包括 ‘(’，‘) ’，‘{ ’，‘ } ’，‘[’，‘]’ 的字符串 s ，判断字符串是否有效。
// 有效字符串需满足：
// 左括号必须用相同类型的右括号闭合。
// 左括号必须以正确的顺序闭合。
// 每个右括号都有一个对应的相同类型的左括号。

// 示例 1：
// 输入：s = “() ”
// 输出：true

// 示例 2：
// 输入：s = “()[]{ } ”
// 输出：true

// 示例 3：
// 输入：s = “(]”
// 输出：false

// 提示：
// 1 <= s.length <= 104
// s 仅由括号 ‘()[]{ } ’ 组成
// ————————————————

// 解题思路：
// 1、当看完题目后，我先用常规的思路思考了一遍，比如字符串的长度一定是偶数，因为括号是成对出现的。然后就是去遍历，比如第2个字符是"(“，那么对应的第倒数第2位置上是“）”。但是我发现我的思路是错的，如果是”[()()()()()()()]"这样的字符串，我上面的思路是不成立的。所以这里就需要用到栈的概念了，栈是先进后出。
// 2、使用栈（Stack）数据结构：栈是一种先进后出（First In Last Out, FILO）的数据结构，非常适合用来检查括号的有效性，因为我们总是先遇到左括号，后遇到对应的右括号。
// 3、遍历字符串：从左到右遍历输入字符串s中的每一个字符。
// 如果遇到一个左括号’(‘, ’{
//     ', ‘[’，就将其压入栈中。
//     如果遇到一个右括号’) ‘, ’
// } ', ‘]’，则需要检查栈顶的左括号是否与当前的右括号匹配：
// 如果匹配，就弹出栈顶的左括号；
// 如果不匹配，或者栈为空（这意味着没有匹配的左括号），则字符串无效。
// 4、检查结果：遍历结束后，如果栈为空，说明所有的左括号都有对应的右括号，字符串有效；否则无效。



/**
 * @param {string} s
 * @return {boolean}
 */
var isValid = function (s) {
    // 定义一个映射，方便查找左右括号的对应关系
    const bracketMap = {
        ')': '(',
        '}': '{',
        ']': '['
    };
    // 初始化一个栈
    let stack = [];

    // 遍历字符串
    for (let char of s) {
        // 如果是左括号，压入栈中
        if (Object.values(bracketMap).includes(char)) {
            stack.push(char);
        } else if (char in bracketMap) { // 如果是右括号
            // 栈为空或者栈顶的左括号与当前的右括号不匹配，则字符串无效
            if (!stack.length || stack.pop() !== bracketMap[char]) {
                // stack.pop()是关键点，每次都是队尾截取一个字符，并且原数组会改变
                return false;
            }
        } else {// 如果遇到了非括号字符，也可以根据题目的具体要求决定如何处理，这里假设输入只包含括号
            throw new Error("Invalid character encountered.");
        }
    }
    // 遍历结束，如果栈为空，说明所有括号都已正确闭合
    return stack.length === 0;
};
