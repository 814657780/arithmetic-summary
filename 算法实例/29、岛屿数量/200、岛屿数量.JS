// 难度：中等

// 题目：
// 给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。

// 岛屿总是被水包围，并且每座岛屿只能由水平方向和 / 或竖直方向上相邻的陆地连接形成。

// 此外，你可以假设该网格的四条边均被水包围。

// 示例 1：

// 输入：grid = [
//     [“1”,“1”,“1”,“1”,“0”],
//     [“1”,“1”,“0”,“1”,“0”],
//     [“1”,“1”,“0”,“0”,“0”],
//     [“0”,“0”,“0”,“0”,“0”]
// ]
// 输出：1

// 示例 2：

// 输入：grid = [
//     [“1”,“1”,“0”,“0”,“0”],
//     [“1”,“1”,“0”,“0”,“0”],
//     [“0”,“0”,“1”,“0”,“0”],
//     [“0”,“0”,“0”,“1”,“1”]
// ]
// 输出：3

// 提示：

// m == grid.length
// n == grid[i].length
// 1 <= m, n <= 300
// grid[i][j] 的值为 ‘0’ 或 ‘1’

// 解题思路：
// 解决这道题目的关键在于理解和实现深度优先搜索（DFS）或广度优先搜索（BFS）算法来遍历网格，标记已访问的陆地，从而计算出独立的岛屿数量。这里提供一个基于DFS的解决方案。

// 初始化计数器：创建一个计数器变量islandCount来记录岛屿的数量，初始值为 0。
// 遍历网格：遍历二维网格的每一个单元格。对于每个单元格：
// 如果当前单元格为 ‘1’（表示陆地）且尚未访问过，执行以下操作：
// - 岛屿计数器加 1，表示发现了一个新的岛屿。
// - 调用 DFS 函数，从当前单元格开始，遍历与其相连的所有陆地，并将它们标记为已访问，防止重复计数。
// DFS 函数：
// 对于给定的陆地单元格，将其标记为已访问。
// 遍历其上下左右四个相邻单元格（注意边界检查），如果相邻单元格是陆地且未访问过，递归调用 DFS 函数。
// 返回结果：遍历完成后，返回islandCount，即为岛屿的总数。
// JavaScript 实现：

/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function (grid) {
    let islandCount = 0;
    // 深度优先搜索函数
    function dfs(i, j) {
        // 检查边界和是否为陆地以及是否访问过
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] === '0') {
            return;
        }
        // 标记为已访问
        grid[i][j] = '0';
        // 遍历上下左右相邻单元格，并且形成递归调用
        dfs(i - 1, j); // 上   递归调用（在执行dfs(i - 1, j)中，又会遍历（i - 1,j）这个位置的上下左右，所以一直在往外扩散着）
        dfs(i + 1, j); // 下   递归调用 同上
        dfs(i, j - 1); // 左   递归调用 同上
        dfs(i, j + 1); // 右   递归调用 同上
    }
    // 遍历网格 i表示有多少行，j表示有多少列
    for (let i = 0; i < grid.length; i++) {
        for (let j = 0; j < grid[0].length; j++) {
            if (grid[i][j] === '1') {
                islandCount++; //发现新岛屿
                dfs(i, j); // 从当前陆地开始深度优先搜索
            }
        }
    }
    return islandCount;
};
// 示例
const grid = [
    ["1", "1", "0", "0", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "1", "0", "0"],
    ["0", "0", "0", "1", "1"]
];
console.log(numIslands(grid)); // 输出: 3

// 这段代码首先定义了numIslands函数，它接收一个二维数组grid作为输入，并使用深度优先搜索策略来遍历和标记岛屿，最后返回岛屿的总数。DFS函数dfs负责从一个陆地单元格开始，递归地访问所有与之相连的陆地单元格，并将它们标记为已访问。


